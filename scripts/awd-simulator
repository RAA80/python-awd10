#! /usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import threading
import struct
import time
from serial import Serial

from awd10.device import AWD10
from awd10.client import (CMD_ECHO, CMD_EXEC_CMD, CMD_GET_PARAM, CMD_GET_RESULT,
                          CMD_SET_PARAM, CMD_ENROT, CMD_RESET, CMD_SETROT, CMD_STOP)


class SimAWD10(object):
    def __init__(self, port, unit):
        self.answer = {'Address': 0, 'Command': 0, 'Param1': 0, 'Param0': 0,
                       'Data1':   0, 'Data0':   0, 'Status': 0, 'CS':     0}
        self.state = {}
        self.reset_state()

        self.param = AWD10["param"]
        for key in self.param:
            self.param[key].update(value=0)
        self.param["Address"]['value'] = unit

        self.result = AWD10["result"]
        for key in self.result:
            self.result[key].update(value=0)

        self.port = Serial(port=port, timeout=1)   # default 9600-8-N-1

        self.drv = Driver(self.state)
        self.drv.daemon = True
        self.drv.start()

        self.start()

    def __del__(self):
        if self.drv:
            self.drv.stop = True
            self.drv.join()

    def reset_state(self):
        self.state.update(FB=False, SkipLim=False, LimDrop=False,
                          StopDrop=False, IntrfEN=False, IntrfVal=False,
                          IntrfDir=False, SrcParam=False, SkipCV=False,
                          Mode=0, StOverCur=False, StMaxPWM=False,
                          StDirFrwRev=False, StMotAct=False, StInRev=False,
                          StInFrw=False, StLimRev=False, StLimFrw=False)

    def start(self):
        while True:
            try:
                readed = self.port.read(8)
                request = struct.unpack(">8B", readed)
            except KeyboardInterrupt:
                break
            except struct.error:
                continue

            if self.param["Address"]['value'] == request[0]:
                # address = request[0]
                command = request[1]
                param = request[2]
                data = (request[4] << 8) + request[5]
                # status = request[6]
                crc = request[7]

                if crc != -sum(request[:7]) & 0xFF:
                    self.answer_header(0xE1, 0x00)          # Wrong request CRC

                elif command == CMD_ECHO:
                    self.answer_header(command, 0x41)
                    self.answer['Param0'] = 0x57
                    self.answer['Data1'] = 0x44

                elif command == CMD_EXEC_CMD:
                    if param == CMD_RESET:
                        self.reset_state()

                        self.drv.speed = 0
                        self.set_param(self.result, command, param, "Speed", 0)

                    elif param in [CMD_ENROT, CMD_STOP]:
                        self.answer_header(command, param)

                    elif param == CMD_SETROT:
                        if request[4]>>7 & 1:
                            data -= 65536

                        self.drv.speed = data
                        self.set_param(self.result, command, param, "Speed", abs(data))

                    else:
                        self.answer_header(0xC3, 0x00)      # Wrong command parameter

                elif command == CMD_GET_RESULT:
                    key = self._search_key(self.result, param)
                    if key:
                        if key == "Status":
                            self.result["Status"]['value'] = self.status()
                        self.get_param(self.result, command, param, key)
                    else:
                        self.answer_header(0xC3, 0x00)      # Wrong command parameter

                elif command == CMD_GET_PARAM:
                    key = self._search_key(self.param, param)
                    if key:
                        self.get_param(self.param, command, param, key)
                    else:
                        self.answer_header(0xC3, 0x00)      # Wrong command parameter

                elif command == CMD_SET_PARAM:
                    key = self._search_key(self.param, param)
                    if key:
                        if key == "Address":
                            self.param["Address"]['value'] = data
                        self.set_param(self.param, command, param, key, data)
                    else:
                        self.answer_header(0xC3, 0x00)      # Wrong command parameter

                else:
                    self.answer_header(0xD2, 0x00)          # Wrong command
                self.write()

    def write(self):
        packet = bytearray([self.answer['Address'], self.answer['Command'],
                            self.answer['Param1'], self.answer['Param0'],
                            self.answer['Data1'], self.answer['Data0'],
                            self.status(), 0x00])
        packet[7] = -sum(packet) & 0xFF
        self.port.write(packet)

    def status(self):
        return int((8*"{:b}").format(self.state['StOverCur'], self.state['StMaxPWM'],
                                     self.state['StDirFrwRev'], self.state['StMotAct'],
                                     self.state['StInRev'], self.state['StInFrw'],
                                     self.state['StLimRev'], self.state['StLimFrw']),
                                     2)

    def answer_header(self, command, param):
        self.answer['Address'] = self.param["Address"]['value']
        self.answer['Command'] = command
        self.answer['Param1'] = param
        self.answer['Param0'] = 0x00
        self.answer['Data1'] = 0x00
        self.answer['Data0'] = 0x00

    def get_param(self, arg, command, param, key):
        self.answer_header(command, param)
        self.answer['Data1'] = (arg[key]['value'] & 0xFF00) >> 8
        self.answer['Data0'] = arg[key]['value'] & 0x00FF

    def set_param(self, arg, command, param, key, value):
        arg[key]['value'] = value
        self.get_param(arg, command, param, key)

    def _search_key(self, arg, value):
        return next((key for key in arg if value == arg[key]['code']), None)


class Driver(threading.Thread):
    def __init__(self, state, speed=0):
        threading.Thread.__init__(self)

        self.state = state
        self.speed = speed
        self.position = 0
        self.stop = False

    def run(self):
        while not self.stop:
            self.position += self.speed
            self.position = min(self.position, 10000)
            self.position = max(self.position, -10000)

            self.state['StMotAct'] = self.speed != 0
            self.state['StDirFrwRev'] = self.speed > 0
            self.state['StLimFrw'] = self.position < 10000
            self.state['StLimRev'] = self.position > -10000

            # print("speed: {:5d}, position: {:6d}".format(self.speed, self.position))
            time.sleep(1.0)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='AWD10 simulator command-line option')
    parser.add_argument('--port', type=str, nargs='?', const='COM1', required=True, help='Set used port name')
    parser.add_argument('--unit', type=int, nargs='?', const=5, required=True, help='Set used AWD10 address')
    args = parser.parse_args()

    SimAWD10(port=args.port, unit=args.unit)
