#! /usr/bin/env python3

"""Симулятор блока управления AWD10."""

from __future__ import annotations

import argparse
import logging
from struct import error, unpack
from threading import Thread
from time import sleep

from awd10.device import AWD10
from awd10.protocol import CMD, STATE
from serial import Serial

HIGH_LIMIT = 10000
LOW_LIMIT = -10000

PARAMETERS = dict[str, dict[str, int]]


class SimAWD10:
    """Класс симулятора блока управления AWD10."""

    def __init__(self, port: str, unit: int) -> None:
        """Инициализация класса симулятора с указанными параметрами."""

        self.answer = {"Address": 0, "Command": 0, "Param1": 0, "Param0": 0,
                       "Data1":   0, "Data0":   0, "Status": 0, "CS":     0}
        self.state: STATE = {}
        self.reset_state()

        self.param: PARAMETERS = AWD10["param"]
        [self.param[key].update(value=0) for key in self.param]
        self.param["Address"]["value"] = unit

        self.result: PARAMETERS = AWD10["result"]
        [self.result[key].update(value=0) for key in self.result]

        self.port = Serial(port=port, timeout=1)   # default 9600-8-N-1

        self.drv = Driver(self.state)
        self.drv.daemon = True
        self.drv.start()

        self.start()

    def __del__(self) -> None:
        """Закрытие соединения с устройством при удалении объекта."""

        if self.port.is_open:
            self.port.close()
        if self.drv:
            self.drv.stop = True
            self.drv.join()

    def reset_state(self) -> None:
        """Сброс флагов текущего состояния."""

        self.state.update(FB=False, SkipLim=False, LimDrop=False,
                          StopDrop=False, IntrfEN=False, IntrfVal=False,
                          IntrfDir=False, SrcParam=False, SkipCV=False,
                          Mode=0, StOverCur=False, StMaxPWM=False,
                          StDirFrwRev=False, StMotAct=False, StInRev=False,
                          StInFrw=False, StLimRev=False, StLimFrw=False)

    def start(self) -> None:
        """Запуск обработки команд в симуляторе."""

        while True:
            try:
                readed = self.port.read(8)
                address, command, param, _, data, _, crc = unpack(">4Bh2B", readed)
            except KeyboardInterrupt:
                break
            except error:
                continue

            if self.param["Address"]["value"] == address:
                if crc != -sum(readed[:-1]) & 0xFF:
                    self.answer_header(0xE1, 0x00)          # Wrong request CRC

                elif command == CMD.ECHO:
                    self.answer_header(command, 0x41)
                    self.answer["Param0"] = 0x57
                    self.answer["Data1"] = 0x44

                elif command == CMD.EXEC_CMD:
                    if param == CMD.RESET:
                        self.reset_state()

                        self.drv.speed = 0
                        self.set_param(self.result, command, param, "Speed", 0)

                    elif param in {CMD.ENROT, CMD.STOP}:
                        self.answer_header(command, param)

                    elif param == CMD.SETROT:
                        self.drv.speed = data
                        self.set_param(self.result, command, param, "Speed", abs(data))

                    else:
                        self.answer_header(0xC3, 0x00)      # Wrong command parameter

                elif command == CMD.GET_RESULT:
                    if key := self._search_key(self.result, param):
                        if key == "Status":
                            self.result["Status"]["value"] = self.status()
                        self.get_param(self.result, command, param, key)
                    else:
                        self.answer_header(0xC3, 0x00)      # Wrong command parameter

                elif command == CMD.GET_PARAM:
                    if key := self._search_key(self.param, param):
                        self.get_param(self.param, command, param, key)
                    else:
                        self.answer_header(0xC3, 0x00)      # Wrong command parameter

                elif command == CMD.SET_PARAM:
                    if key := self._search_key(self.param, param):
                        if key == "Address":
                            self.param["Address"]["value"] = data
                        self.set_param(self.param, command, param, key, data)
                    else:
                        self.answer_header(0xC3, 0x00)      # Wrong command parameter

                else:
                    self.answer_header(0xD2, 0x00)          # Wrong command
                self.write()

    def write(self) -> None:
        """Запись данных в порт."""

        packet = bytearray([self.answer["Address"], self.answer["Command"],
                            self.answer["Param1"], self.answer["Param0"],
                            self.answer["Data1"], self.answer["Data0"],
                            self.status(), 0x00])
        packet[7] = -sum(packet) & 0xFF
        self.port.write(packet)

    def status(self) -> int:
        """Преобразование флагов статуса в целочисленный тип."""

        return int((f'{self.state["StOverCur"]:b}{self.state["StMaxPWM"]:b}'
                    f'{self.state["StDirFrwRev"]:b}{self.state["StMotAct"]:b}'
                    f'{self.state["StInRev"]:b}{self.state["StInFrw"]:b}'
                    f'{self.state["StLimRev"]:b}{self.state["StLimFrw"]:b}'),
                    2)

    def answer_header(self, command: int, param: int) -> None:
        """Формирование параметров ответа по умолчанию."""

        self.answer["Address"] = self.param["Address"]["value"]
        self.answer["Command"] = command
        self.answer["Param1"] = param
        self.answer["Param0"] = 0x00
        self.answer["Data1"] = 0x00
        self.answer["Data0"] = 0x00

    def get_param(self, arg: PARAMETERS, command: int, param: int, key: str) -> None:
        """Получение значения параметра по заданному ключу."""

        self.answer_header(command, param)
        self.answer["Data1"] = (arg[key]["value"] & 0xFF00) >> 8
        self.answer["Data0"] = arg[key]["value"] & 0x00FF

    def set_param(self, arg: PARAMETERS, command: int, param: int, key: str,
                        value: int) -> None:
        """Установка нового значения параметра по заданному ключу."""

        arg[key]["value"] = value
        self.get_param(arg, command, param, key)

    @staticmethod
    def _search_key(arg: PARAMETERS, value: int) -> str | None:
        """Поиск ключа по заданному коду."""

        return next((key for key in arg if value == arg[key]["code"]), None)


class Driver(Thread):
    """Класс, отвечающий за симуляцию перемещения двигателя."""

    def __init__(self, state: STATE, speed: int = 0) -> None:
        """Инициализация класса с указанными параметрами."""

        Thread.__init__(self)

        self.state = state
        self.speed = speed
        self.position = 0
        self.stop = False

    def run(self) -> None:
        """Запуск симуляции перемещения двигателя."""

        while not self.stop:
            self.position += self.speed
            self.position = max(min(self.position, HIGH_LIMIT), LOW_LIMIT)

            self.state["StMotAct"] = self.speed != 0
            self.state["StDirFrwRev"] = self.speed > 0
            self.state["StLimFrw"] = self.position < HIGH_LIMIT
            self.state["StLimRev"] = self.position > LOW_LIMIT

            logging.debug("speed: %5d, position: %6d", self.speed, self.position)
            sleep(1.0)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description="AWD10 simulator command-line option",
                                     epilog="Usage example:\n"
                                            "awd-simulator --port COM1 --unit 5")

    parser.add_argument("--port", type=str, required=True, help="pseudo serial port name")
    parser.add_argument("--unit", type=int, required=True, help="pseudo AWD10 address")
    parser.add_argument("--debug", action="store_true", help="print debug information")
    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    SimAWD10(port=args.port, unit=args.unit)
