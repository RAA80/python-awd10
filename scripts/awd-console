#! /usr/bin/env python3

import argparse
import contextlib
import logging

from awd10.client import AwdSerialClient
from awd10.device import AWD10
from awd10.protocol import AwdProtocolError

if __name__ == "__main__":
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description="AWD10 command-line option",
                                     epilog="Usage example:\n"
                                            "awd-console --port COM1 --scan\n"
                                            "awd-console --port COM1 --unit 5 --echo\n"
                                            "awd-console --port COM1 --unit 5 --get Address\n"
                                            "awd-console --port COM1 --unit 5 --set Address 5\n"
                                            "awd-console --port COM1 --unit 5 --move 100\n"
                                            "awd-console --port COM1 --unit 5 --stop\n"
                                            "awd-console --port COM1 --unit 5 --enrot\n"
                                            "awd-console --port COM1 --unit 5 --state\n")

    parser.add_argument("--port", type=str, required=True,
                                  help="serial port name")
    parser.add_argument("--timeout", type=float, default=1.0,
                                     help="timeout in seconds")
    parser.add_argument("--debug", action="store_true",
                                   help="print debug information")
    group1 = parser.add_argument_group("Scanner")
    group1.add_argument("--scan", action="store_true",
                                  help="scan available modules")
    group2 = parser.add_argument_group("User")
    group2.add_argument("--unit", type=int,
                                  help="AWD10 address")
    group2_ex = group2.add_mutually_exclusive_group()
    group2_ex.add_argument("--echo", action="store_true",
                                     help="send ECHO request")
    group2_ex.add_argument("--reset", action="store_true",
                                      help="send RESET request")
    group2_ex.add_argument("--state", action="store_true",
                                      help="read AWD10 state")
    group2_ex.add_argument("--get", type=str, nargs=1, metavar=("KEY"),
                                    choices=sorted(AWD10["param"]),
                                    help="read config value")
    group2_ex.add_argument("--set", type=str, nargs=2, metavar=("KEY", "VALUE"),
                                    help="write config value")
    group2_ex.add_argument("--move", type=int, nargs=1, metavar=("SPEED"),
                                     help="send MOVE request")
    group2_ex.add_argument("--stop", action="store_true",
                                     help="send STOP request")
    group2_ex.add_argument("--enrot", action="store_true",
                                      help="send ENROT request")
    group2_ex.add_argument("--result", type=str, nargs=1, metavar=("KEY"),
                                       choices=sorted(AWD10["result"]),
                                       help="read result value")
    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    if args.scan:
        for unit in range(1, 256):
            client = AwdSerialClient(port=args.port, unit=unit, timeout=args.timeout)
            with contextlib.suppress(AwdProtocolError):
                if client.echo():
                    print(f"Unit: {unit} - OK")
            del client
    else:
        client = AwdSerialClient(port=args.port, unit=args.unit, timeout=args.timeout)

        if args.echo:
            print(client.echo())
        elif args.state:
            print(client.state())
        elif args.reset:
            print(client.reset())
        elif args.move:
            print(client.move(args.move[0]))
        elif args.get:
            print(client.get_param(args.get[0]))
        elif args.set:
            print(client.set_param(args.set[0], int(args.set[1])))
        elif args.stop:
            print(client.stop())
        elif args.enrot:
            print(client.enrot())
        elif args.result:
            print(client.result(args.result[0]))
